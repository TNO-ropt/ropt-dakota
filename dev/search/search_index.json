{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"A Dakota plugin for <code>ropt</code>","text":"<p>The <code>ropt-dakota</code> package extends the <code>ropt</code> module by providing a plugin that integrates optimization algorithms from the Dakota toolkit.  <code>ropt</code> itself is a robust optimization framework designed for both continuous and discrete optimization workflows and is extensible through its plugin architecture. Installing <code>ropt-dakota</code> makes these Dakota algorithms directly available within <code>ropt</code>.</p>"},{"location":"#reference","title":"Reference","text":""},{"location":"#ropt_dakota.dakota.DakotaOptimizer","title":"ropt_dakota.dakota.DakotaOptimizer","text":"<p>               Bases: <code>Optimizer</code></p> <p>Dakota optimization backend for ropt.</p> <p>This class provides an interface to several optimization algorithms from <code>Dakota</code>, enabling their use within <code>ropt</code>.</p> <p>To select an optimizer, set the <code>method</code> field within the <code>optimizer</code> section of the <code>EnOptConfig</code> configuration object to the desired algorithm's name. Most methods support the general options defined in the <code>EnOptConfig</code> object. For algorithm-specific options, use the <code>options</code> dictionary within the <code>optimizer</code> section.</p> <p>The table below lists the included methods together with the method-specific options that are supported. Click on the method name to consult the corresponding <code>Dakota</code> documentation:</p> Method Method Options optpp_q_newton search_method, merit_function, steplength_to_boundary, centering_parameter, max_step, gradient_tolerance, max_iterations, convergence_tolerance, max_function_evaluations conmin_mfd max_iterations, convergence_tolerance, constraint_tolerance, max_function_evaluations conmin_frcg max_iterations, convergence_tolerance, constraint_tolerance, max_function_evaluations mesh_adaptive_search initial_delta, variable_tolerance, function_precision, seed, history_file, display_format, variable_neighborhood_search, neighbor_order, display_all_evaluations, use_surrogate, max_iterations, max_function_evaluations coliny_ea population_size, initialization_type, fitness_type, replacement_type, crossover_rate, crossover_type, mutation_rate, mutation_type, constraint_penalty, solution_target, seed, show_misc_options, misc_options, max_iterations, convergence_tolerance, max_function_evaluations soga fitness_type, replacement_type, convergence_type, max_iterations, max_function_evaluations, population_size, print_each_pop, initialization_type, crossover_type, mutation_type, seed, convergence_tolerance moga fitness_type, replacement_type, niching_type, convergence_type, postprocessor_type, max_iterations, max_function_evaluations, population_size, print_each_pop, initialization_type, crossover_type, mutation_type, seed, convergence_tolerance asynch_pattern_search initial_delta, contraction_factor, variable_tolerance, solution_target, merit_function, constraint_penalty, smoothing_factor, constraint_tolerance, max_function_evaluations"}]}